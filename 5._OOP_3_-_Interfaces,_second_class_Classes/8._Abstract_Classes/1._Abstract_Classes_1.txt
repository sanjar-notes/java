Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-08T04:27:36+05:30

====== 1. Abstract Classes 1 ======
Created Saturday 08 August 2020

**The Idea**
* We're going to talk about abstraction.
* An interface was a contract for a class.
	We could just use List, makes it somewhat generic.
	{{./pasted_image.png}} {{./pasted_image001.png}}
* We could have changed even the String, by omitting it.
	Most general.
	{{./pasted_image002.png}}
--------------------
**Rules and definitions**
* Interfaces are by definition absract. But Java also allows for abstract classes. They can have abstract methods, but also have concrete methods too, **in contrast to an interface.**
* If the inheriting class has any method unimplemented, it too should be abstract. Otherwise it is said to be a //concrete //class. 
* Abstract classes cannot be **instantiated**.
--------------------
**Syntax**: Add abstract after the access modifier
1. For a class:
{{{code: lang="java" linenumbers="True"
public abstract Animal{}
}}}
	
2. For a function:
{{{code: lang="java" linenumbers="True"
public abstract void eat();
}}}
	
Note: 
* The unimplemented functions do exist, so they are technically overriden. 'Override' annotation must be used.
* Constructors do exist for abstract classes.
Abstract class - [[./abstract_classes_1/src/Animal.java]]
Concrete class(inheriting) - [[./abstract_classes_1/src/Dog.java]]
--------------------
Example of inheritance from abstract class which is itself abstract .
