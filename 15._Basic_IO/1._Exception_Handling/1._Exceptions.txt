Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-11T03:12:20+05:30

====== 1. Exceptions ======
Created Tuesday 11 August 2020

Exception - an event which disrupts the normal flow of the program.

* Using exceptions is not a rule of thumb.
* Using exceptions generates less code - the motivation to use exceptions.

* The exception is propagated throug the stack, until some activation record handles it.
* Keep code less inside a try catch block
--------------------
* To **throw** - create an exception object and use the throw keyword
* All exceptions have an overloaded constructor that takes a string.
{{{code: lang="java" linenumbers="True"
throw new ArithmeticException("attempt to divide by zero"); // message using e.getMessage()
}}}

--------------------
**Multi-catch exception**
{{{code: lang="java" linenumbers="True"
try
{
	// code 1
	// code 2
}
catch(/*code 1 exception*/){}
catch(/*code 2 exception*/){}
// works like a switch case
}}}

* Keep the ones down more general then the top one. Exception is the most general.
* There is another way to catch potential multiple exceptions - but they will be treated in the same way - Java 8 feature
{{{code: lang="java" linenumbers="True"
catch(ArithmeticException | NoSuchException e) //bitwise OR
{}
}}}

--------------------
* Start try after normal statements, otherwise the variables might go out of scope in the catch and finally blocks.
--------------------
using **finally**
* The finally block(if present) is executed for a try-catch irrespective of whether an exception was thrown or not.
* finally runs even if the try-catch has return statements.
