Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-13T12:31:01+05:30

====== 2. Using threads ======
Created Thursday 13 August 2020
[[../threads_intro]]
There are two ways we can work with threads in Java:
1. By** extending **the** 'Thread' class**
	Steps:
	1. Extend the Thread class in your class(extends).
	2. Override the **run** method
	3. In main, make a Thread instance using our class's constructor
	4. Call threadObj**.start**() - The JVM now runs the **run** method for us.
{{{code: lang="java" linenumbers="True"
// class code
public class X extends Thread{
	@Override
	public void run()
	{
		System.out.println("Hello from another thread");
	}
}

// main code
public class MainClass{
	public static void main(String[] args)
	{
		Thread threadObj = new X(); // our class's instance alone
		threadObj.start();	// call start()
	}
}
}}}

2. By **implementing **the** Runnable interface**
	Steps:
	1. Implement the runnable interface in your class(implements).
	2. Implement the '**run**' method
	3. In main, create a Thread instance by wrapping an instance of our class inside the thread construtor.
	4. Call threadObj**.start**() - The JVM now runs the **run** method for us.
{{{code: lang="java" linenumbers="True"
// class code
public class Y implements Thread{
	@Override
	public void run()
	{
		System.out.println("Hello from another thread, an interface");
	}
}

// main code
public class MainClass{
	public static void main(String[] args)
	{
		Thread threadObj = new Thread(new Y()); // new instance of Y inside Thread()
		threadObj.start();	// call start()
	}
}
}}}

{{{code: lang="java" linenumbers="True"
public void run(); // run() signature
}}}

--------------------
There's a shortcut for creating a thread - by using an anonymous class. We can do so using the interface or the Thread class
{{{code: lang="java" linenumbers="True"
(new Thread(){
	@Override
	public void run()
	{
		System.out.println("Bingo");
	}
}).start();
}}}
